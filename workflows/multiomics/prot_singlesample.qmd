---
title: "Prot singlesample"
namespace: "Multiomics"
description: "Processing unimodal single-sample CITE-seq data."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `prot_singlesample`  
Namespace: `multiomics`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/experiment_website_push/workflows/multiomics/prot_singlesample){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r experiment_website_push -latest \
  -main-script workflows/multiomics/prot_singlesample/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml

```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r experiment_website_push -latest \
  -profile docker \
  -main-script workflows/multiomics/prot_singlesample/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Input

|Name      |Description         |Attributes                                  |
|:---------|:-------------------|:-------------------------------------------|
|`--id`    |ID of the sample.   |`string`, required, example: `"foo"`        |
|`--input` |Path to the sample. |`file`, required, example: `"dataset.h5mu"` |


### Output

|Name       |Description                     |Attributes                                 |
|:----------|:-------------------------------|:------------------------------------------|
|`--output` |Destination path to the output. |`file`, required, example: `"output.h5mu"` |


### Filtering options

|Name                      |Description                                          |Attributes                    |
|:-------------------------|:----------------------------------------------------|:-----------------------------|
|`--min_counts`            |Minimum number of counts captured per cell.          |`integer`, example: `200`     |
|`--max_counts`            |Maximum number of counts captured per cell.          |`integer`, example: `5000000` |
|`--min_proteins_per_cell` |Minimum of non-zero values per cell.                 |`integer`, example: `200`     |
|`--max_proteins_per_cell` |Maximum of non-zero values per cell.                 |`integer`, example: `1500000` |
|`--min_cells_per_protein` |Minimum of non-zero values per gene.                 |`integer`, example: `3`       |
|`--min_fraction_mito`     |Minimum fraction of proteins that are mitochondrial. |`double`, example: `0`        |
|`--max_fraction_mito`     |Maximum fraction of proteins that are mitochondrial. |`double`, example: `0.2`      |

## Authors

  * Dries De Maeyer [{{< fa brands github >}}](https://github.com/ddemaeyer) (author)
  * Robrecht Cannoodt [{{< fa brands github >}}](https://github.com/rcannood) [{{< fa brands orcid >}}](https://orcid.org/0000-0003-3641-729X) (author, maintainer)
  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) (author)

## Visualisation

```{mermaid}
%%| column: screen-inset-shaded
flowchart LR
    p0(Input)
    p3(toSortedList)
    p5(flatMap)
    p15(join)
    p13(filter_with_counts)
    p25(join)
    p23(do_filter)
    p32(Output)
    p0-->p3
    p3-->p5
    p5-->p15
    p5-->p13
    p13-->p15
    p15-->p25
    p15-->p23
    p23-->p25
    p25-->p32

```
