---
title: "Full pipeline"
namespace: "Multiomics"
description: "A pipeline to analyse multiple multiomics samples."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `full_pipeline`  
Namespace: `multiomics`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/main/openpipelines/workflows/multiomics/full_pipeline){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r main -latest \
  -main-script openpipelines/workflows/multiomics/full_pipeline/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml

```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r main -latest \
  -profile docker \
  -main-script openpipelines/workflows/multiomics/full_pipeline/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name               |Description                                                    |Attributes                                                                |
|:------------------|:--------------------------------------------------------------|:-------------------------------------------------------------------------|
|`--id`             |ID of the sample.                                              |`string`, required, example: `"foo"`                                      |
|`--input`          |Path to the sample.                                            |`file`, required, example: `"input.h5mu"`                                 |
|`--obs_covariates` |The .obs field(s) that define the covariate(s) to regress out. |`string`, default: `"sample_id"`, example: `"batch"`, example: `"sample"` |


### Sample ID options

Options for adding the id to .obs on the MuData object. Having a sample 
id present in a requirement of several components for this pipeline.



|Name                                    |Description                                                                                         |Attributes                       |
|:---------------------------------------|:---------------------------------------------------------------------------------------------------|:--------------------------------|
|`--add_id_to_obs`                       |Add the value passed with --id to .obs.                                                             |`boolean`, default: `TRUE`       |
|`--add_id_obs_output`                   |.Obs column to add the sample IDs to. Required and only used when  --add_id_to_obs is set to 'true' |`string`, default: `"sample_id"` |
|`--add_id_make_observation_keys_unique` |Join the id to the .obs index (.obs_names).  Only used when --add_id_to_obs is set to 'true'.       |`boolean`, default: `TRUE`       |


### RNA filtering options

|Name                       |Description                                      |Attributes                    |
|:--------------------------|:------------------------------------------------|:-----------------------------|
|`--rna_min_counts`         |Minimum number of counts captured per cell.      |`integer`, example: `200`     |
|`--rna_max_counts`         |Maximum number of counts captured per cell.      |`integer`, example: `5000000` |
|`--rna_min_genes_per_cell` |Minimum of non-zero values per cell.             |`integer`, example: `200`     |
|`--rna_max_genes_per_cell` |Maximum of non-zero values per cell.             |`integer`, example: `1500000` |
|`--rna_min_cells_per_gene` |Minimum of non-zero values per gene.             |`integer`, example: `3`       |
|`--rna_min_fraction_mito`  |Minimum fraction of UMIs that are mitochondrial. |`double`, example: `0`        |
|`--rna_max_fraction_mito`  |Maximum fraction of UMIs that are mitochondrial. |`double`, example: `0.2`      |


### CITE-seq filtering options

|Name                           |Description                                          |Attributes                      |
|:------------------------------|:----------------------------------------------------|:-------------------------------|
|`--prot_min_counts`            |Minimum number of counts per cell.                   |`integer`, example: `3`         |
|`--prot_max_counts`            |Minimum number of counts per cell.                   |`integer`, example: `5000000`   |
|`--prot_min_proteins_per_cell` |Minimum of non-zero values per cell.                 |`integer`, example: `200`       |
|`--prot_max_proteins_per_cell` |Maximum of non-zero values per cell.                 |`integer`, example: `100000000` |
|`--prot_min_cells_per_protein` |Minimum of non-zero values per protein.              |`integer`, example: `3`         |
|`--prot_min_fraction_mito`     |Minimum fraction of proteins that are mitochondrial. |`double`, example: `0`          |
|`--prot_max_fraction_mito`     |Maximum fraction of proteins that are mitochondrial. |`double`, example: `0.2`        |


### Highly variable gene detection

|Name                              |Description                                                                                                                                                                                                    |Attributes                             |
|:---------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------|
|`--filter_with_hvg_var_output`    |In which .var slot to store a boolean array corresponding to the highly variable genes.                                                                                                                        |`string`, default: `"filter_with_hvg"` |
|`--filter_with_hvg_obs_batch_key` |If specified, highly-variable genes are selected within each batch separately and merged. This simple  process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. |`string`, default: `"sample_id"`       |


### QC metrics calculation options

|Name               |Description                                                                                                                                                                                                                    |Attributes                                                                |
|:------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------|
|`--var_qc_metrics` |Keys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled 'True',  compared to the total sum of the values for all genes. |`string`, default: `"filter_with_hvg"`, example: `"ercc,highly_variable"` |
|`--top_n_vars`     |Number of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. `--top_n_vars 20,50` finds cumulative proportion to the 20th and 50th most expressed vars.                |`integer`, default: `50`, default: `100`, default: `200`, default: `500`  |


### Harmony integration options

|Name                  |Description                                                                                                                                                                             |Attributes             |
|:---------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------|
|`--rna_harmony_theta` |Diversity clustering penalty parameter. Specify for each variable in group.by.vars.  theta=0 does not encourage any diversity. Larger values of theta result in more diverse clusters." |`double`, default: `2` |


### Leiden Clustering Options

|Name                  |Description                                                                    |Attributes             |
|:---------------------|:------------------------------------------------------------------------------|:----------------------|
|`--leiden_resolution` |Control the coarseness of the clustering. Higher values lead to more clusters. |`double`, default: `1` |

## Authors

  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) (author, maintainer)
