"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.action = void 0;
var fs_1 = require("fs");
var pandoc = require("pandoc-filter");
var path_1 = require("path");
var tmp_1 = require("tmp");
var exec = require("child_process").execSync;
var counter = 0;
var folder = process.cwd();
var D2Theme;
(function (D2Theme) {
    D2Theme[D2Theme["NeutralDefault"] = 0] = "NeutralDefault";
    D2Theme[D2Theme["NeutralGrey"] = 1] = "NeutralGrey";
    D2Theme[D2Theme["FlagshipTerrastruct"] = 3] = "FlagshipTerrastruct";
    D2Theme[D2Theme["CoolClassics"] = 4] = "CoolClassics";
    D2Theme[D2Theme["MixedBerryBlue"] = 5] = "MixedBerryBlue";
    D2Theme[D2Theme["GrapeSoda"] = 6] = "GrapeSoda";
    D2Theme[D2Theme["Aubergine"] = 7] = "Aubergine";
    D2Theme[D2Theme["ColorblindClear"] = 8] = "ColorblindClear";
    D2Theme[D2Theme["VanillaNitroCola"] = 100] = "VanillaNitroCola";
    D2Theme[D2Theme["OrangeCreamsicle"] = 101] = "OrangeCreamsicle";
    D2Theme[D2Theme["ShirelyTemple"] = 102] = "ShirelyTemple";
    D2Theme[D2Theme["EarthTones"] = 103] = "EarthTones";
    D2Theme[D2Theme["EvergladeGreen"] = 104] = "EvergladeGreen";
    D2Theme[D2Theme["ButteredToast"] = 105] = "ButteredToast";
    D2Theme[D2Theme["DarkMauve"] = 200] = "DarkMauve";
    D2Theme[D2Theme["Terminal"] = 300] = "Terminal";
    D2Theme[D2Theme["TerminalGrayscale"] = 301] = "TerminalGrayscale";
    D2Theme[D2Theme["Origami"] = 302] = "Origami";
})(D2Theme || (D2Theme = {}));
var D2Layout;
(function (D2Layout) {
    D2Layout["dagre"] = "dagre";
    D2Layout["elk"] = "elk";
})(D2Layout || (D2Layout = {}));
var D2Format;
(function (D2Format) {
    D2Format["svg"] = "svg";
    D2Format["png"] = "png";
    D2Format["pdf"] = "pdf";
})(D2Format || (D2Format = {}));
var action = function (elt, _format) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function () {
        var attrs, content, id, classes, options, imageAttrs, tmpFile, outDir, savePath, newPath, fullCmd, data, data, imageFolder, readStream, writeStream, fig;
        return __generator(this, function (_d) {
            if (elt.t != "CodeBlock")
                return [2 /*return*/, undefined];
            attrs = elt.c[0];
            content = elt.c[1];
            id = attrs[0];
            classes = attrs[1];
            options = {
                theme: D2Theme.NeutralDefault,
                layout: D2Layout.dagre,
                format: D2Format.svg,
                sketch: false,
                pad: 100,
            };
            imageAttrs = [];
            if (classes.indexOf("d2") < 0)
                return [2 /*return*/, undefined];
            attrs[2].map(function (item) {
                switch (item[0]) {
                    case "theme":
                        if (+item[1] in D2Theme) {
                            options.theme = +item[1];
                        }
                        else {
                            var themeNamePascal = item[1]
                                .split(" ")
                                .map(function (word) { return word.charAt(0).toUpperCase() + word.substring(1); })
                                .join("");
                            if (themeNamePascal in D2Theme) {
                                options.theme = D2Theme[themeNamePascal];
                            }
                        }
                        break;
                    case "sketch":
                        options.sketch = item[1] === "true";
                        break;
                    case "layout":
                        if (item[1] in D2Layout)
                            options.layout = item[1];
                        break;
                    case "format":
                        if (item[1] in D2Format)
                            options.format = item[1];
                        break;
                    case "pad":
                        options.pad = +item[1];
                        break;
                    case "folder":
                    case "filename":
                    case "caption":
                        options[item[0]] = item[1];
                        break;
                    default:
                        imageAttrs.push(item);
                        break;
                }
            });
            counter++;
            tmpFile = (0, tmp_1.fileSync)();
            (0, fs_1.writeFileSync)(tmpFile.name, content);
            outDir = (_a = options.folder) !== null && _a !== void 0 ? _a : "";
            if (options.caption && !options.filename) {
                options.filename = (_b = options.caption) === null || _b === void 0 ? void 0 : _b.replace(/(?:^|\s|["'([{])+\S/g, function (match) { return match.toUpperCase(); }).replace(/\s+/g, "").replace(/\//g, "-");
            }
            if (!options.filename) {
                options.filename = "diagram-".concat(counter);
            }
            savePath = tmpFile.name + "." + options.format;
            newPath = (0, path_1.join)(outDir, "".concat(options.filename, ".").concat(options.format));
            fullCmd = "d2 --theme=".concat(options.theme, " --layout=").concat(options.layout, " --sketch=").concat(options.sketch, " --pad=").concat(options.pad, " ").concat(tmpFile.name, " ").concat(savePath);
            exec(fullCmd);
            if (!options.folder) {
                if (options.format === "svg") {
                    data = (0, fs_1.readFileSync)(savePath, "utf8");
                    newPath =
                        "data:image/svg+xml;base64," + Buffer.from(data).toString("base64");
                }
                else if (options.format === "pdf") {
                    newPath = savePath;
                }
                else {
                    data = (0, fs_1.readFileSync)(savePath);
                    newPath = "data:image/png;base64," + Buffer.from(data).toString("base64");
                }
            }
            else {
                imageFolder = (0, path_1.join)(folder, outDir);
                if (!(0, fs_1.existsSync)(imageFolder)) {
                    (0, fs_1.mkdirSync)(imageFolder);
                }
                readStream = (0, fs_1.createReadStream)(savePath);
                writeStream = (0, fs_1.createWriteStream)(newPath);
                readStream.on("close", function () {
                    (0, fs_1.unlinkSync)(savePath);
                });
                readStream.pipe(writeStream);
            }
            fig = options.caption ? "fig:" : "";
            return [2 /*return*/, pandoc.Para([
                    pandoc.Image([id, [], imageAttrs], [pandoc.Str((_c = options.caption) !== null && _c !== void 0 ? _c : "")], [newPath, fig]),
                ])];
        });
    });
};
exports.action = action;
//# sourceMappingURL=filter.js.map