---
title: Passing parameter lists
order: 15
---

Using **Viash's VDSL3 Nextflow platform**, an optional `--param_list` argument can be passed to OpenPipelines workflows. `--param_list` enables passing a large number of inputs to a workflow, resulting in a multi-event nextflow channel. 

# Event-specific and global parameters

The creation of multi-event Nextflow channels has the advantage of passing **event-specific parameters** for each input file. In the following `param_list` file, a multi-event Nextflow channel is created for two input files: `foo.txt` and `bar.txt`. For each input, an id and additional parameters that are specific for each input can be passed as event-specific parameters (here: `event_param`).

```bash
$cat param_list.yaml
- id: foo
  input: foo.txt
  event_param: lorem
- id: bar
  input: bar.txt
  event_param: ipsum
```

```bash
nextflow run ... --param_list param_list.yaml
```

The event-specific parameters in the `param_list` file can be combined with **global parameters** that apply to all the input events. For example, the combining `--param_list param_list.yaml` with `--global_param baz`: 

```bash
nextflow run ... --param_list param_list.yaml --global_param baz
```

Will result in the following events being processed:
* `id`: `foo`, `input`: `foo.txt`, `event_param`: `lorem`, `global_param`: `baz`
* `id`: `bar`, `input`: `bar.txt`, `event_param`: `ipsum`, `global_param`: `baz`

Note that event-sepcific parameters defined in the `param_list` will always overwrite global parameters. For example, 
running

```bash
nextflow run ... --param_list param_list.yaml --global_param baz
```

with the following `param_list.yaml`:

```yaml
- id: foo
  input: foo.txt
- id: bar
  input: bar.txt
  global_param: ipsum
```

Will result in the following events being processed:

* `id`: `foo`, `input`: `foo.txt`, `event_param`: `lorem`
* `id`: `bar`, `input`: `bar.txt`, `event_param`: `ipsum`

# `param_list` file types

A `param_list` can either be a yaml file, a json file or a csv file.

## YAML file
The following example shows how to use a yaml file as a parameter list.

```bash
$ cat param_list.yaml
- id: foo
  input: foo.txt
  event_param: lorem
- id: bar
  input: bar.txt
  event_param: ipsum
```

```bash
nextflow run ... --param_list param_list.yaml
```

## JSON file
The following example shows how to use a yaml file as a parameter list.

```bash
$ cat param_list.json
[
    {
        "id": "foo",
        "input": "foo.txt",
        "event_param": "lorem"
    },
    {
        "id": "bar",
        "input": "bar.txt",
        "event_param": "ipsum"
    }
]
```

```bash
nextflow run ... --param_list param_list.json
```

## CSV file
The following example shows how to use a csv file as a parameter list. 

```bash
$ cat param_list.csv
id,input,event_param
foo,foo.txt,lorem
bar,bar.txt,ipsum
```

```bash
nextflow run ... --param_list param_list.csv
```

# Passing `param_list` to Nextflow's `params-file`

The `param_list` can also be passed via Nextflow's `param-file`, such that both the event-specific and global parameters can be passed via a file.

## As a YAML file

The following example shows how to use a YAML file as a `params-file` containing the `param_list`.

```bash
$ cat params-file.yaml
param_list:
  - id: foo
    input: foo.txt
    event_param: lorem
  - id: bar
    input: bar.txt
    event_param: ipsum
global_param: baz
```

```bash
nextflow run ... -params-file params-file.yaml
```

## As a Nextflow config

The following example shows how to use a Nextflow config file as a `params-file` containing the `param_list`.

```
$ cat params.config
params {
  param_list: [
    ['id': 'foo', 'input': 'foo.txt', 'event_param': lorem],
    ['id': 'bar', 'input': 'bar.txt', 'event_param': ipsum]
  ],
  global_param: baz
}
```

```bash
nextflow run ... -params-file params.config
```

## Resolving paths

All files defined in the `param_list` are relative to the location of the `param_list` file. If the `--param_list` is a YAML blob or a Nextflow config, all files in the `param_list` are relative to the current working directory.

For example, with a `param_list.yaml` file located in the `data` directory:

```bash
$ cat /data/param_list.yaml
- id: foo
  input: foo.txt
- id: bar
  input: /path/to/bar.txt
```

This will result in the following parameter sets being processed:

* `id`: `foo`, `input`: `/data/foo.txt`
* `id`: `bar`, `input`: `/path/to/bar.txt`

Note that this also works when the param list is located on a remote location, such as an S3 bucket. In that case, the files in the param list are relative to the location of the param list on the remote location.