---
title: "Rna multisample"
namespace: "Multiomics"
description: "Processing unimodal multi-sample RNA transcriptomics data."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `rna_multisample`  
Namespace: `multiomics`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/0.9.0/./workflows/multiomics/rna_multisample){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.9.0 -latest \
  -main-script ./workflows/multiomics/rna_multisample/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
id: # please fill in - example: "concatenated"
sample_id: # please fill in - example: ["foo"]
input: # please fill in - example: ["dataset.h5mu"]

# Sample ID options
add_id_to_obs: true
add_id_obs_output: "sample_id"
add_id_make_observation_keys_unique: true

# Filtering highly variable genes
filter_with_hvg_var_output: "filter_with_hvg"
filter_with_hvg_obs_batch_key: "sample_id"
filter_with_hvg_flavor: "seurat"
# filter_with_hvg_n_top_genes: 123

# QC metrics calculation options
var_qc_metrics: ["filter_with_hvg"]
top_n_vars: [50, 100, 200, 500]

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.9.0 -latest \
  -profile docker \
  -main-script ./workflows/multiomics/rna_multisample/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name          |Description                 |Attributes                                    |
|:-------------|:---------------------------|:---------------------------------------------|
|`--id`        |ID of the concatenated file |`string`, required, example: `"concatenated"` |
|`--sample_id` |IDs of the sample.          |`string`, required, example: `"foo"`          |
|`--input`     |Path to the samples.        |`file`, required, example: `"dataset.h5mu"`   |


### Sample ID options

Options for adding the id to .obs on the MuData object. Having a sample 
id present in a requirement of several components for this pipeline.



|Name                                    |Description                                                                                         |Attributes                       |
|:---------------------------------------|:---------------------------------------------------------------------------------------------------|:--------------------------------|
|`--add_id_to_obs`                       |Add the value passed with --id to .obs.                                                             |`boolean`, default: `TRUE`       |
|`--add_id_obs_output`                   |.Obs column to add the sample IDs to. Required and only used when  --add_id_to_obs is set to 'true' |`string`, default: `"sample_id"` |
|`--add_id_make_observation_keys_unique` |Join the id to the .obs index (.obs_names).  Only used when --add_id_to_obs is set to 'true'.       |`boolean`, default: `TRUE`       |


### Filtering highly variable genes

|Name                              |Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |Attributes                             |
|:---------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------|
|`--filter_with_hvg_var_output`    |In which .var slot to store a boolean array corresponding to the highly variable genes.                                                                                                                                                                                                                                                                                                                                                                                                     |`string`, default: `"filter_with_hvg"` |
|`--filter_with_hvg_obs_batch_key` |If specified, highly-variable genes are selected within each batch separately and merged. This simple  process avoids the selection of batch-specific genes and acts as a lightweight batch correction method.  For all flavors, genes are first sorted by how many batches they are a HVG. For dispersion-based flavors  ties are broken by normalized dispersion. If flavor = 'seurat_v3', ties are broken by the median (across batches) rank based on within-batch normalized variance. |`string`, default: `"sample_id"`       |
|`--filter_with_hvg_flavor`        |Choose the flavor for identifying highly variable genes. For the dispersion based methods in their default workflows, Seurat passes the cutoffs whereas Cell Ranger passes n_top_genes.                                                                                                                                                                                                                                                                                                     |`string`, default: `"seurat"`          |
|`--filter_with_hvg_n_top_genes`   |Number of highly-variable genes to keep. Mandatory if filter_with_hvg_flavor is set to 'seurat_v3'.                                                                                                                                                                                                                                                                                                                                                                                         |`integer`                              |


### QC metrics calculation options

|Name               |Description                                                                                                                                                                                                                    |Attributes                                                                |
|:------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------|
|`--var_qc_metrics` |Keys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled 'True',  compared to the total sum of the values for all genes. |`string`, default: `"filter_with_hvg"`, example: `"ercc,highly_variable"` |
|`--top_n_vars`     |Number of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. `--top_n_vars 20,50` finds cumulative proportion to the 20th and 50th most expressed vars.                |`integer`, default: `50`, default: `100`, default: `200`, default: `500`  |

## Authors


  * Dries De Maeyer [{{< fa brands github >}}](https://github.com/ddemaeyer) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-de-maeyer-b46a814) (author)

  * Robrecht Cannoodt [{{< fa brands github >}}](https://github.com/rcannood) [{{< fa brands orcid >}}](https://orcid.org/0000-0003-3641-729X) [{{< fa brands linkedin >}}](https://linkedin.com/in/robrechtcannoodt) (author, maintainer)

  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (author)

## Visualisation

```{mermaid}
%%| column: screen-inset-shaded
flowchart LR
    p0(Input)
    p3(toSortedList)
    p5(flatMap)
    p9(filter)
    p11(flatMap)
    p17(add_id)
    p21(collect)
    p24(mix)
    p23(filter)
    p31(concat)
    p41(normalize_total)
    p51(log1p)
    p61(delete_layer)
    p71(filter_with_hvg)
    p81(calculate_qc_metrics)
    p89(Output)
    p23-->p24
    p0-->p3
    p3-->p5
    p5-->p9
    p5-->p23
    p9-->p11
    p11-->p17
    p17-->p21
    p21-->p24
    p24-->p31
    p31-->p41
    p41-->p51
    p51-->p61
    p61-->p71
    p71-->p81
    p81-->p89

```
