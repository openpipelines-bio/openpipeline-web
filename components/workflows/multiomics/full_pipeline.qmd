---
title: "Full pipeline"
namespace: "Multiomics"
description: "A pipeline to analyse multiple multiomics samples."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `full_pipeline`  
Namespace: `multiomics`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/0.8.0/workflows/multiomics/full_pipeline){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.8.0 -latest \
  -main-script workflows/multiomics/full_pipeline/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
id: # please fill in - example: "foo"
input: # please fill in - example: "input.h5mu"
obs_covariates: ["sample_id"]

# Sample ID options
add_id_to_obs: true
add_id_obs_output: "sample_id"
add_id_make_observation_keys_unique: true

# RNA filtering options
# rna_min_counts: 200
# rna_max_counts: 5000000
# rna_min_genes_per_cell: 200
# rna_max_genes_per_cell: 1500000
# rna_min_cells_per_gene: 3
# rna_min_fraction_mito: 0
# rna_max_fraction_mito: 0.2

# CITE-seq filtering options
# prot_min_counts: 3
# prot_max_counts: 5000000
# prot_min_proteins_per_cell: 200
# prot_max_proteins_per_cell: 100000000
# prot_min_cells_per_protein: 3
# prot_min_fraction_mito: 0
# prot_max_fraction_mito: 0.2

# Highly variable gene detection
filter_with_hvg_var_output: "filter_with_hvg"
filter_with_hvg_obs_batch_key: "sample_id"

# QC metrics calculation options
var_qc_metrics: ["filter_with_hvg"]
top_n_vars: [50, 100, 200, 500]

# Harmony integration options
rna_harmony_theta: [2]

# Leiden Clustering Options
leiden_resolution: 1

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.8.0 -latest \
  -profile docker \
  -main-script workflows/multiomics/full_pipeline/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name               |Description                                                    |Attributes                                                                |
|:------------------|:--------------------------------------------------------------|:-------------------------------------------------------------------------|
|`--id`             |ID of the sample.                                              |`string`, required, example: `"foo"`                                      |
|`--input`          |Path to the sample.                                            |`file`, required, example: `"input.h5mu"`                                 |
|`--obs_covariates` |The .obs field(s) that define the covariate(s) to regress out. |`string`, default: `"sample_id"`, example: `"batch"`, example: `"sample"` |


### Sample ID options

Options for adding the id to .obs on the MuData object. Having a sample 
id present in a requirement of several components for this pipeline.



|Name                                    |Description                                                                                         |Attributes                       |
|:---------------------------------------|:---------------------------------------------------------------------------------------------------|:--------------------------------|
|`--add_id_to_obs`                       |Add the value passed with --id to .obs.                                                             |`boolean`, default: `TRUE`       |
|`--add_id_obs_output`                   |.Obs column to add the sample IDs to. Required and only used when  --add_id_to_obs is set to 'true' |`string`, default: `"sample_id"` |
|`--add_id_make_observation_keys_unique` |Join the id to the .obs index (.obs_names).  Only used when --add_id_to_obs is set to 'true'.       |`boolean`, default: `TRUE`       |


### RNA filtering options

|Name                       |Description                                      |Attributes                    |
|:--------------------------|:------------------------------------------------|:-----------------------------|
|`--rna_min_counts`         |Minimum number of counts captured per cell.      |`integer`, example: `200`     |
|`--rna_max_counts`         |Maximum number of counts captured per cell.      |`integer`, example: `5000000` |
|`--rna_min_genes_per_cell` |Minimum of non-zero values per cell.             |`integer`, example: `200`     |
|`--rna_max_genes_per_cell` |Maximum of non-zero values per cell.             |`integer`, example: `1500000` |
|`--rna_min_cells_per_gene` |Minimum of non-zero values per gene.             |`integer`, example: `3`       |
|`--rna_min_fraction_mito`  |Minimum fraction of UMIs that are mitochondrial. |`double`, example: `0`        |
|`--rna_max_fraction_mito`  |Maximum fraction of UMIs that are mitochondrial. |`double`, example: `0.2`      |


### CITE-seq filtering options

|Name                           |Description                                          |Attributes                      |
|:------------------------------|:----------------------------------------------------|:-------------------------------|
|`--prot_min_counts`            |Minimum number of counts per cell.                   |`integer`, example: `3`         |
|`--prot_max_counts`            |Minimum number of counts per cell.                   |`integer`, example: `5000000`   |
|`--prot_min_proteins_per_cell` |Minimum of non-zero values per cell.                 |`integer`, example: `200`       |
|`--prot_max_proteins_per_cell` |Maximum of non-zero values per cell.                 |`integer`, example: `100000000` |
|`--prot_min_cells_per_protein` |Minimum of non-zero values per protein.              |`integer`, example: `3`         |
|`--prot_min_fraction_mito`     |Minimum fraction of proteins that are mitochondrial. |`double`, example: `0`          |
|`--prot_max_fraction_mito`     |Maximum fraction of proteins that are mitochondrial. |`double`, example: `0.2`        |


### Highly variable gene detection

|Name                              |Description                                                                                                                                                                                                    |Attributes                             |
|:---------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------|
|`--filter_with_hvg_var_output`    |In which .var slot to store a boolean array corresponding to the highly variable genes.                                                                                                                        |`string`, default: `"filter_with_hvg"` |
|`--filter_with_hvg_obs_batch_key` |If specified, highly-variable genes are selected within each batch separately and merged. This simple  process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. |`string`, default: `"sample_id"`       |


### QC metrics calculation options

|Name               |Description                                                                                                                                                                                                                    |Attributes                                                                |
|:------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------|
|`--var_qc_metrics` |Keys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled 'True',  compared to the total sum of the values for all genes. |`string`, default: `"filter_with_hvg"`, example: `"ercc,highly_variable"` |
|`--top_n_vars`     |Number of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. `--top_n_vars 20,50` finds cumulative proportion to the 20th and 50th most expressed vars.                |`integer`, default: `50`, default: `100`, default: `200`, default: `500`  |


### Harmony integration options

|Name                  |Description                                                                                                                                                                             |Attributes             |
|:---------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------|
|`--rna_harmony_theta` |Diversity clustering penalty parameter. Specify for each variable in group.by.vars.  theta=0 does not encourage any diversity. Larger values of theta result in more diverse clusters." |`double`, default: `2` |


### Leiden Clustering Options

|Name                  |Description                                                                    |Attributes             |
|:---------------------|:------------------------------------------------------------------------------|:----------------------|
|`--leiden_resolution` |Control the coarseness of the clustering. Higher values lead to more clusters. |`double`, default: `1` |

## Authors

  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) (author, maintainer)

## Visualisation

```{mermaid}
%%| column: screen-inset-shaded
flowchart LR
    p0(Input)
    p2(toSortedList)
    p4(flatMap)
    p7(filter)
    p16(join)
    p14(add_id)
    p19(mix)
    p18(filter)
    p21(Output)
    p22(filter)
    p30(join)
    p28(split_modalities)
    p36(concat)
    p32(filter)
    p34(test_wf:run_wf:splitStub)
    p37(flatMap)
    p38(filter)
    p41(toSortedList)
    p43(flatMap)
    p53(join)
    p51(filter_with_counts)
    p63(join)
    p61(do_filter)
    p74(join)
    p72(filter_with_scrublet)
    p78(toSortedList)
    p79(filter)
    p83(toSortedList)
    p85(flatMap)
    p89(filter)
    p91(flatMap)
    p99(join)
    p97(test_wf:run_wf:rna_multisample:add_id:add_id_process1)
    p101(collect)
    p104(mix)
    p103(filter)
    p113(join)
    p111(concat)
    p123(join)
    p121(normalize_total)
    p133(join)
    p131(log1p)
    p143(join)
    p141(delete_layer)
    p153(join)
    p151(filter_with_hvg)
    p163(join)
    p161(calculate_qc_metrics)
    p257(concat)
    p166(filter)
    p169(toSortedList)
    p171(flatMap)
    p181(join)
    p179(test_wf:run_wf:prot_singlesample:filter_with_counts:filter_with_counts_process1)
    p191(join)
    p189(test_wf:run_wf:prot_singlesample:do_filter:do_filter_process1)
    p196(toSortedList)
    p197(filter)
    p201(toSortedList)
    p203(flatMap)
    p207(filter)
    p209(flatMap)
    p217(join)
    p215(test_wf:run_wf:prot_multisample:add_id:add_id_process2)
    p219(collect)
    p222(mix)
    p221(filter)
    p231(join)
    p229(test_wf:run_wf:prot_multisample:concat:concat_process1)
    p241(join)
    p239(clr)
    p244(filter)
    p246(groupTuple)
    p255(join)
    p253(test_wf:run_wf:concat:concat_process2)
    p258(toSortedList)
    p267(join)
    p265(merge)
    p271(toSortedList)
    p273(flatMap)
    p284(join)
    p282(pca)
    p287(filter)
    p298(concat)
    p288(filter)
    p296(join)
    p294(harmonypy)
    p307(join)
    p305(find_neighbors)
    p317(join)
    p315(leiden)
    p327(join)
    p325(umap)
    p332(toSortedList)
    p334(Output)
    p18-->p19
    p36-->p37
    p37-->p38
    p78-->p79
    p103-->p104
    p37-->p166
    p196-->p197
    p221-->p222
    p37-->p244
    p257-->p258
    p287-->p298
    p0-->p2
    p2-->p4
    p4-->p7
    p4-->p18
    p7-->p16
    p7-->p14
    p14-->p16
    p16-->p19
    p16-->p22
    p16-->p32
    p19-->p21
    p22-->p30
    p22-->p28
    p28-->p30
    p30-->p36
    p32-->p34
    p34-->p36
    p38-->p41
    p41-->p43
    p43-->p53
    p43-->p51
    p51-->p53
    p53-->p63
    p53-->p61
    p61-->p63
    p63-->p74
    p63-->p72
    p72-->p74
    p74-->p78
    p79-->p83
    p83-->p85
    p85-->p89
    p85-->p103
    p89-->p91
    p91-->p99
    p91-->p97
    p97-->p99
    p99-->p101
    p101-->p104
    p104-->p113
    p104-->p111
    p111-->p113
    p113-->p123
    p113-->p121
    p121-->p123
    p123-->p133
    p123-->p131
    p131-->p133
    p133-->p143
    p133-->p141
    p141-->p143
    p143-->p153
    p143-->p151
    p151-->p153
    p153-->p163
    p153-->p161
    p161-->p163
    p163-->p257
    p166-->p169
    p169-->p171
    p171-->p181
    p171-->p179
    p179-->p181
    p181-->p191
    p181-->p189
    p189-->p191
    p191-->p196
    p197-->p201
    p201-->p203
    p203-->p207
    p203-->p221
    p207-->p209
    p209-->p217
    p209-->p215
    p215-->p217
    p217-->p219
    p219-->p222
    p222-->p231
    p222-->p229
    p229-->p231
    p231-->p241
    p231-->p239
    p239-->p241
    p241-->p257
    p244-->p246
    p246-->p255
    p246-->p253
    p253-->p255
    p255-->p257
    p258-->p267
    p258-->p265
    p265-->p267
    p267-->p271
    p271-->p273
    p273-->p284
    p273-->p282
    p282-->p284
    p284-->p287
    p284-->p288
    p288-->p296
    p288-->p294
    p294-->p296
    p296-->p298
    p298-->p307
    p298-->p305
    p305-->p307
    p307-->p317
    p307-->p315
    p315-->p317
    p317-->p327
    p317-->p325
    p325-->p327
    p327-->p332
    p332-->p334

```
