---
title: "Full pipeline"
namespace: "Multiomics"
description: "A pipeline to analyse multiple multiomics samples."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `full_pipeline`  
Namespace: `multiomics`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/0.10.2/./workflows/multiomics/full_pipeline){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.10.2 -latest \
  -main-script ./workflows/multiomics/full_pipeline/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
id: # please fill in - example: "foo"
input: # please fill in - example: "input.h5mu"

# Outputs
# output: "$id.$key.output.h5mu"

# Sample ID options
add_id_to_obs: true
add_id_obs_output: "sample_id"
add_id_make_observation_keys_unique: true

# RNA filtering options
# rna_min_counts: 200
# rna_max_counts: 5000000
# rna_min_genes_per_cell: 200
# rna_max_genes_per_cell: 1500000
# rna_min_cells_per_gene: 3
# rna_min_fraction_mito: 0
# rna_max_fraction_mito: 0.2

# CITE-seq filtering options
# prot_min_counts: 3
# prot_max_counts: 5000000
# prot_min_proteins_per_cell: 200
# prot_max_proteins_per_cell: 100000000
# prot_min_cells_per_protein: 3

# Highly variable gene detection
filter_with_hvg_var_output: "filter_with_hvg"
filter_with_hvg_obs_batch_key: "sample_id"

# Mitochondrial Gene Detection
# var_name_mitochondrial_genes: "foo"
# var_gene_names: "gene_symbol"
mitochondrial_gene_regex: "^[mM][tT]-"

# QC metrics calculation options
# var_qc_metrics: ["ercc", "highly_variable"]
top_n_vars: [50, 100, 200, 500]

# PCA options
pca_overwrite: false

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.10.2 -latest \
  -profile docker \
  -main-script ./workflows/multiomics/full_pipeline/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name      |Description         |Attributes                                |
|:---------|:-------------------|:-----------------------------------------|
|`--id`    |ID of the sample.   |`string`, required, example: `"foo"`      |
|`--input` |Path to the sample. |`file`, required, example: `"input.h5mu"` |


### Outputs

|Name       |Description                     |Attributes                                 |
|:----------|:-------------------------------|:------------------------------------------|
|`--output` |Destination path to the output. |`file`, required, example: `"output.h5mu"` |


### Sample ID options

Options for adding the id to .obs on the MuData object. Having a sample 
id present in a requirement of several components for this pipeline.



|Name                                    |Description                                                                                         |Attributes                       |
|:---------------------------------------|:---------------------------------------------------------------------------------------------------|:--------------------------------|
|`--add_id_to_obs`                       |Add the value passed with --id to .obs.                                                             |`boolean`, default: `TRUE`       |
|`--add_id_obs_output`                   |.Obs column to add the sample IDs to. Required and only used when  --add_id_to_obs is set to 'true' |`string`, default: `"sample_id"` |
|`--add_id_make_observation_keys_unique` |Join the id to the .obs index (.obs_names).  Only used when --add_id_to_obs is set to 'true'.       |`boolean`, default: `TRUE`       |


### RNA filtering options

|Name                       |Description                                      |Attributes                    |
|:--------------------------|:------------------------------------------------|:-----------------------------|
|`--rna_min_counts`         |Minimum number of counts captured per cell.      |`integer`, example: `200`     |
|`--rna_max_counts`         |Maximum number of counts captured per cell.      |`integer`, example: `5000000` |
|`--rna_min_genes_per_cell` |Minimum of non-zero values per cell.             |`integer`, example: `200`     |
|`--rna_max_genes_per_cell` |Maximum of non-zero values per cell.             |`integer`, example: `1500000` |
|`--rna_min_cells_per_gene` |Minimum of non-zero values per gene.             |`integer`, example: `3`       |
|`--rna_min_fraction_mito`  |Minimum fraction of UMIs that are mitochondrial. |`double`, example: `0`        |
|`--rna_max_fraction_mito`  |Maximum fraction of UMIs that are mitochondrial. |`double`, example: `0.2`      |


### CITE-seq filtering options

|Name                           |Description                             |Attributes                      |
|:------------------------------|:---------------------------------------|:-------------------------------|
|`--prot_min_counts`            |Minimum number of counts per cell.      |`integer`, example: `3`         |
|`--prot_max_counts`            |Minimum number of counts per cell.      |`integer`, example: `5000000`   |
|`--prot_min_proteins_per_cell` |Minimum of non-zero values per cell.    |`integer`, example: `200`       |
|`--prot_max_proteins_per_cell` |Maximum of non-zero values per cell.    |`integer`, example: `100000000` |
|`--prot_min_cells_per_protein` |Minimum of non-zero values per protein. |`integer`, example: `3`         |


### Highly variable gene detection

|Name                              |Description                                                                                                                                                                                                    |Attributes                             |
|:---------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------|
|`--filter_with_hvg_var_output`    |In which .var slot to store a boolean array corresponding to the highly variable genes.                                                                                                                        |`string`, default: `"filter_with_hvg"` |
|`--filter_with_hvg_obs_batch_key` |If specified, highly-variable genes are selected within each batch separately and merged. This simple  process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. |`string`, default: `"sample_id"`       |


### Mitochondrial Gene Detection

|Name                             |Description                                                                                                                                                                                                                |Attributes                         |
|:--------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------------------|
|`--var_name_mitochondrial_genes` |In which .var slot to store a boolean array corresponding the mitochondrial genes.                                                                                                                                         |`string`                           |
|`--var_gene_names`               |.var column name to be used to detect mitochondrial genes instead of .var_names (default if not set). Gene names matching with the regex value from --mitochondrial_gene_regex will be identified as a mitochondrial gene. |`string`, example: `"gene_symbol"` |
|`--mitochondrial_gene_regex`     |Regex string that identifies mitochondrial genes from --var_gene_names. By default will detect human and mouse mitochondrial genes from a gene symbol.                                                                     |`string`, default: `"^[mM][tT]-"`  |


### QC metrics calculation options

|Name               |Description                                                                                                                                                                                                                                                                                                                                   |Attributes                                                               |
|:------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------|
|`--var_qc_metrics` |Keys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled 'True',  compared to the total sum of the values for all genes. Defaults to the combined values specified for --var_name_mitochondrial_genes and --filter_with_hvg_var_output. |List of `string`, example: `"ercc,highly_variable"`, multiple_sep: `","` |
|`--top_n_vars`     |Number of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. `--top_n_vars 20,50` finds cumulative proportion to the 20th and 50th most expressed vars.                                                                                                                               |List of `integer`, default: `50, 100, 200, 500`, multiple_sep: `","`     |


### PCA options

|Name              |Description                             |Attributes     |
|:-----------------|:---------------------------------------|:--------------|
|`--pca_overwrite` |Allow overwriting slots for PCA output. |`boolean_true` |

## Authors


  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (author, maintainer)

## Visualisation

```{mermaid}
%%| column: screen-inset-shaded
flowchart LR
    v0(Input)
    v2(toSortedList)
    v4(flatMap)
    v7(toSortedList)
    v9(Output)
    v11(filter)
    v17(add_id)
    v19(join)
    v23(mix)
    v22(filter)
    v25(filter)
    v30(split_modalities)
    v32(join)
    v39(concat)
    v35(filter)
    v37(test_wf:run_wf:split_modalities_workflow:splitStub)
    v40(flatMap)
    v41(filter)
    v44(toSortedList)
    v46(flatMap)
    v53(filter_with_counts)
    v55(join)
    v63(do_filter)
    v65(join)
    v73(filter_with_scrublet)
    v75(join)
    v110(concat)
    v79(filter)
    v82(toSortedList)
    v84(flatMap)
    v91(test_wf:run_wf:singlesample_processing_workflow:prot_singlesample:filter_with_counts:filter_with_counts_process1)
    v93(join)
    v101(test_wf:run_wf:singlesample_processing_workflow:prot_singlesample:do_filter:do_filter_process1)
    v103(join)
    v108(filter)
    v112(groupTuple)
    v118(concat)
    v120(join)
    v125(filter)
    v128(toSortedList)
    v130(flatMap)
    v132(toSortedList)
    v134(Output)
    v140(normalize_total)
    v142(join)
    v150(log1p)
    v152(join)
    v160(delete_layer)
    v162(join)
    v170(filter_with_hvg)
    v172(join)
    v180(rna_calculate_qc_metrics)
    v182(join)
    v223(concat)
    v188(filter)
    v191(toSortedList)
    v193(flatMap)
    v195(toSortedList)
    v197(Output)
    v203(clr)
    v205(join)
    v213(prot_calculate_qc_metrics)
    v215(join)
    v221(filter)
    v224(toSortedList)
    v230(merge)
    v232(join)
    v235(filter)
    v239(toSortedList)
    v241(flatMap)
    v248(pca)
    v250(join)
    v258(find_neighbors)
    v260(join)
    v268(umap)
    v270(join)
    v275(concat)
    v274(filter)
    v276(filter)
    v280(toSortedList)
    v282(flatMap)
    v289(pca)
    v291(join)
    v299(find_neighbors)
    v301(join)
    v309(test_wf:run_wf:integration_setup_workflow:initialize_integration_prot:umap:umap_process1)
    v311(join)
    v316(concat)
    v315(filter)
    v322(publish)
    v324(join)
    v329(toSortedList)
    v331(Output)
    v22-->v23
    v39-->v40
    v40-->v41
    v40-->v79
    v40-->v108
    v223-->v224
    v274-->v275
    v275-->v276
    v275-->v315
    v315-->v316
    v0-->v2
    v2-->v4
    v4-->v7
    v7-->v9
    v4-->v11
    v4-->v22
    v11-->v19
    v11-->v17
    v17-->v19
    v19-->v23
    v23-->v25
    v23-->v35
    v25-->v32
    v25-->v30
    v30-->v32
    v32-->v39
    v35-->v37
    v37-->v39
    v41-->v44
    v44-->v46
    v46-->v55
    v46-->v53
    v53-->v55
    v55-->v65
    v55-->v63
    v63-->v65
    v65-->v75
    v65-->v73
    v73-->v75
    v75-->v110
    v79-->v82
    v82-->v84
    v84-->v93
    v84-->v91
    v91-->v93
    v93-->v103
    v93-->v101
    v101-->v103
    v103-->v110
    v108-->v110
    v110-->v112
    v112-->v120
    v112-->v118
    v118-->v120
    v120-->v125
    v120-->v188
    v120-->v221
    v125-->v128
    v128-->v130
    v130-->v132
    v132-->v134
    v130-->v142
    v130-->v140
    v140-->v142
    v142-->v152
    v142-->v150
    v150-->v152
    v152-->v162
    v152-->v160
    v160-->v162
    v162-->v172
    v162-->v170
    v170-->v172
    v172-->v182
    v172-->v180
    v180-->v182
    v182-->v223
    v188-->v191
    v191-->v193
    v193-->v195
    v195-->v197
    v193-->v205
    v193-->v203
    v203-->v205
    v205-->v215
    v205-->v213
    v213-->v215
    v215-->v223
    v221-->v223
    v224-->v232
    v224-->v230
    v230-->v232
    v232-->v235
    v232-->v274
    v235-->v239
    v239-->v241
    v241-->v250
    v241-->v248
    v248-->v250
    v250-->v260
    v250-->v258
    v258-->v260
    v260-->v270
    v260-->v268
    v268-->v270
    v270-->v275
    v276-->v280
    v280-->v282
    v282-->v291
    v282-->v289
    v289-->v291
    v291-->v301
    v291-->v299
    v299-->v301
    v301-->v311
    v301-->v309
    v309-->v311
    v311-->v316
    v316-->v324
    v316-->v322
    v322-->v324
    v324-->v329
    v329-->v331

```
