---
title: "Full pipeline"
namespace: "Multiomics"
description: "A pipeline to analyse multiple multiomics samples."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `full_pipeline`  
Namespace: `multiomics`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/0.11.4/./workflows/multiomics/full_pipeline){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.11.4 -latest \
  -main-script ./workflows/multiomics/full_pipeline/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
id: # please fill in - example: "foo"
input: # please fill in - example: "input.h5mu"

# Outputs
# output: "$id.$key.output.h5mu"

# Sample ID options
add_id_to_obs: true
add_id_obs_output: "sample_id"
add_id_make_observation_keys_unique: true

# RNA filtering options
# rna_min_counts: 200
# rna_max_counts: 5000000
# rna_min_genes_per_cell: 200
# rna_max_genes_per_cell: 1500000
# rna_min_cells_per_gene: 3
# rna_min_fraction_mito: 0
# rna_max_fraction_mito: 0.2

# CITE-seq filtering options
# prot_min_counts: 3
# prot_max_counts: 5000000
# prot_min_proteins_per_cell: 200
# prot_max_proteins_per_cell: 100000000
# prot_min_cells_per_protein: 3

# Highly variable gene detection
filter_with_hvg_var_output: "filter_with_hvg"
filter_with_hvg_obs_batch_key: "sample_id"

# Mitochondrial Gene Detection
# var_name_mitochondrial_genes: "foo"
# var_gene_names: "gene_symbol"
mitochondrial_gene_regex: "^[mM][tT]-"

# QC metrics calculation options
# var_qc_metrics: ["ercc", "highly_variable"]
top_n_vars: [50, 100, 200, 500]

# PCA options
pca_overwrite: false

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.11.4 -latest \
  -profile docker \
  -main-script ./workflows/multiomics/full_pipeline/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name      |Description         |Attributes                                |
|:---------|:-------------------|:-----------------------------------------|
|`--id`    |ID of the sample.   |`string`, required, example: `"foo"`      |
|`--input` |Path to the sample. |`file`, required, example: `"input.h5mu"` |


### Outputs

|Name       |Description                     |Attributes                                 |
|:----------|:-------------------------------|:------------------------------------------|
|`--output` |Destination path to the output. |`file`, required, example: `"output.h5mu"` |


### Sample ID options

Options for adding the id to .obs on the MuData object. Having a sample 
id present in a requirement of several components for this pipeline.



|Name                                    |Description                                                                                         |Attributes                       |
|:---------------------------------------|:---------------------------------------------------------------------------------------------------|:--------------------------------|
|`--add_id_to_obs`                       |Add the value passed with --id to .obs.                                                             |`boolean`, default: `TRUE`       |
|`--add_id_obs_output`                   |.Obs column to add the sample IDs to. Required and only used when  --add_id_to_obs is set to 'true' |`string`, default: `"sample_id"` |
|`--add_id_make_observation_keys_unique` |Join the id to the .obs index (.obs_names).  Only used when --add_id_to_obs is set to 'true'.       |`boolean`, default: `TRUE`       |


### RNA filtering options

|Name                       |Description                                      |Attributes                    |
|:--------------------------|:------------------------------------------------|:-----------------------------|
|`--rna_min_counts`         |Minimum number of counts captured per cell.      |`integer`, example: `200`     |
|`--rna_max_counts`         |Maximum number of counts captured per cell.      |`integer`, example: `5000000` |
|`--rna_min_genes_per_cell` |Minimum of non-zero values per cell.             |`integer`, example: `200`     |
|`--rna_max_genes_per_cell` |Maximum of non-zero values per cell.             |`integer`, example: `1500000` |
|`--rna_min_cells_per_gene` |Minimum of non-zero values per gene.             |`integer`, example: `3`       |
|`--rna_min_fraction_mito`  |Minimum fraction of UMIs that are mitochondrial. |`double`, example: `0`        |
|`--rna_max_fraction_mito`  |Maximum fraction of UMIs that are mitochondrial. |`double`, example: `0.2`      |


### CITE-seq filtering options

|Name                           |Description                             |Attributes                      |
|:------------------------------|:---------------------------------------|:-------------------------------|
|`--prot_min_counts`            |Minimum number of counts per cell.      |`integer`, example: `3`         |
|`--prot_max_counts`            |Minimum number of counts per cell.      |`integer`, example: `5000000`   |
|`--prot_min_proteins_per_cell` |Minimum of non-zero values per cell.    |`integer`, example: `200`       |
|`--prot_max_proteins_per_cell` |Maximum of non-zero values per cell.    |`integer`, example: `100000000` |
|`--prot_min_cells_per_protein` |Minimum of non-zero values per protein. |`integer`, example: `3`         |


### Highly variable gene detection

|Name                              |Description                                                                                                                                                                                                    |Attributes                             |
|:---------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------|
|`--filter_with_hvg_var_output`    |In which .var slot to store a boolean array corresponding to the highly variable genes.                                                                                                                        |`string`, default: `"filter_with_hvg"` |
|`--filter_with_hvg_obs_batch_key` |If specified, highly-variable genes are selected within each batch separately and merged. This simple  process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. |`string`, default: `"sample_id"`       |


### Mitochondrial Gene Detection

|Name                             |Description                                                                                                                                                                                                                |Attributes                         |
|:--------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------------------|
|`--var_name_mitochondrial_genes` |In which .var slot to store a boolean array corresponding the mitochondrial genes.                                                                                                                                         |`string`                           |
|`--var_gene_names`               |.var column name to be used to detect mitochondrial genes instead of .var_names (default if not set). Gene names matching with the regex value from --mitochondrial_gene_regex will be identified as a mitochondrial gene. |`string`, example: `"gene_symbol"` |
|`--mitochondrial_gene_regex`     |Regex string that identifies mitochondrial genes from --var_gene_names. By default will detect human and mouse mitochondrial genes from a gene symbol.                                                                     |`string`, default: `"^[mM][tT]-"`  |


### QC metrics calculation options

|Name               |Description                                                                                                                                                                                                                                                                                                                                   |Attributes                                                               |
|:------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------|
|`--var_qc_metrics` |Keys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled 'True',  compared to the total sum of the values for all genes. Defaults to the combined values specified for --var_name_mitochondrial_genes and --filter_with_hvg_var_output. |List of `string`, example: `"ercc,highly_variable"`, multiple_sep: `","` |
|`--top_n_vars`     |Number of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. `--top_n_vars 20,50` finds cumulative proportion to the 20th and 50th most expressed vars.                                                                                                                               |List of `integer`, default: `50, 100, 200, 500`, multiple_sep: `","`     |


### PCA options

|Name              |Description                             |Attributes     |
|:-----------------|:---------------------------------------|:--------------|
|`--pca_overwrite` |Allow overwriting slots for PCA output. |`boolean_true` |

## Authors


  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (author, maintainer)

## Visualisation

```{mermaid}
%%| column: screen-inset-shaded
flowchart LR
    v0(Input)
    v2(toSortedList)
    v4(flatMap)
    v7(toSortedList)
    v9(Output)
    v11(filter)
    v17(add_id)
    v19(join)
    v24(mix)
    v22(filter)
    v27(filter)
    v32(split_modalities)
    v34(join)
    v41(concat)
    v37(filter)
    v39(test_wf:run_wf:split_modalities_workflow:splitStub)
    v42(flatMap)
    v44(filter)
    v47(toSortedList)
    v49(flatMap)
    v56(filter_with_counts)
    v58(join)
    v67(do_filter)
    v69(join)
    v78(filter_with_scrublet)
    v80(join)
    v116(concat)
    v84(filter)
    v87(toSortedList)
    v89(flatMap)
    v96(test_wf:run_wf:singlesample_processing_workflow:prot_singlesample:filter_with_counts:filter_with_counts_process1)
    v98(join)
    v107(test_wf:run_wf:singlesample_processing_workflow:prot_singlesample:do_filter:do_filter_process1)
    v109(join)
    v114(filter)
    v120(groupTuple)
    v126(concat)
    v128(join)
    v132(filter)
    v135(toSortedList)
    v137(flatMap)
    v139(toSortedList)
    v141(Output)
    v147(normalize_total)
    v149(join)
    v158(log1p)
    v160(join)
    v169(delete_layer)
    v171(join)
    v180(filter_with_hvg)
    v182(join)
    v191(rna_calculate_qc_metrics)
    v193(join)
    v234(concat)
    v198(filter)
    v201(toSortedList)
    v203(flatMap)
    v205(toSortedList)
    v207(Output)
    v213(clr)
    v215(join)
    v224(prot_calculate_qc_metrics)
    v226(join)
    v231(filter)
    v236(toSortedList)
    v242(merge)
    v244(join)
    v248(filter)
    v252(toSortedList)
    v254(flatMap)
    v261(pca)
    v263(join)
    v272(find_neighbors)
    v274(join)
    v283(umap)
    v285(join)
    v291(concat)
    v290(filter)
    v292(filter)
    v296(toSortedList)
    v298(flatMap)
    v305(pca)
    v307(join)
    v316(find_neighbors)
    v318(join)
    v327(test_wf:run_wf:integration_setup_workflow:initialize_integration_prot:umap:umap_process1)
    v329(join)
    v335(concat)
    v334(filter)
    v343(publish)
    v345(join)
    v350(toSortedList)
    v352(Output)
    v41-->v42
    v290-->v291
    v291-->v292
    v291-->v334
    v334-->v335
    v0-->v2
    v2-->v4
    v4-->v7
    v7-->v9
    v4-->v11
    v4-->v22
    v11-->v19
    v11-->v17
    v17-->v19
    v19-->v24
    v22-->v24
    v24-->v27
    v24-->v37
    v27-->v34
    v27-->v32
    v32-->v34
    v34-->v41
    v37-->v39
    v39-->v41
    v42-->v44
    v42-->v84
    v42-->v114
    v44-->v47
    v47-->v49
    v49-->v58
    v49-->v56
    v56-->v58
    v58-->v69
    v58-->v67
    v67-->v69
    v69-->v80
    v69-->v78
    v78-->v80
    v80-->v116
    v84-->v87
    v87-->v89
    v89-->v98
    v89-->v96
    v96-->v98
    v98-->v109
    v98-->v107
    v107-->v109
    v109-->v116
    v114-->v116
    v116-->v120
    v120-->v128
    v120-->v126
    v126-->v128
    v128-->v132
    v128-->v198
    v128-->v231
    v132-->v135
    v135-->v137
    v137-->v139
    v139-->v141
    v137-->v149
    v137-->v147
    v147-->v149
    v149-->v160
    v149-->v158
    v158-->v160
    v160-->v171
    v160-->v169
    v169-->v171
    v171-->v182
    v171-->v180
    v180-->v182
    v182-->v193
    v182-->v191
    v191-->v193
    v193-->v234
    v198-->v201
    v201-->v203
    v203-->v205
    v205-->v207
    v203-->v215
    v203-->v213
    v213-->v215
    v215-->v226
    v215-->v224
    v224-->v226
    v226-->v234
    v231-->v234
    v234-->v236
    v236-->v244
    v236-->v242
    v242-->v244
    v244-->v248
    v244-->v290
    v248-->v252
    v252-->v254
    v254-->v263
    v254-->v261
    v261-->v263
    v263-->v274
    v263-->v272
    v272-->v274
    v274-->v285
    v274-->v283
    v283-->v285
    v285-->v291
    v292-->v296
    v296-->v298
    v298-->v307
    v298-->v305
    v305-->v307
    v307-->v318
    v307-->v316
    v316-->v318
    v318-->v329
    v318-->v327
    v327-->v329
    v329-->v335
    v335-->v345
    v335-->v343
    v343-->v345
    v345-->v350
    v350-->v352

```
