---
title: "Full pipeline"
namespace: "Multiomics"
description: "A pipeline to analyse multiple multiomics samples."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `full_pipeline`  
Namespace: `multiomics`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/0.11.0/./workflows/multiomics/full_pipeline){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.11.0 -latest \
  -main-script ./workflows/multiomics/full_pipeline/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
id: # please fill in - example: "foo"
input: # please fill in - example: "input.h5mu"

# Outputs
# output: "$id.$key.output.h5mu"

# Sample ID options
add_id_to_obs: true
add_id_obs_output: "sample_id"
add_id_make_observation_keys_unique: true

# RNA filtering options
# rna_min_counts: 200
# rna_max_counts: 5000000
# rna_min_genes_per_cell: 200
# rna_max_genes_per_cell: 1500000
# rna_min_cells_per_gene: 3
# rna_min_fraction_mito: 0
# rna_max_fraction_mito: 0.2

# CITE-seq filtering options
# prot_min_counts: 3
# prot_max_counts: 5000000
# prot_min_proteins_per_cell: 200
# prot_max_proteins_per_cell: 100000000
# prot_min_cells_per_protein: 3

# Highly variable gene detection
filter_with_hvg_var_output: "filter_with_hvg"
filter_with_hvg_obs_batch_key: "sample_id"

# Mitochondrial Gene Detection
# var_name_mitochondrial_genes: "foo"
# var_gene_names: "gene_symbol"
mitochondrial_gene_regex: "^[mM][tT]-"

# QC metrics calculation options
# var_qc_metrics: ["ercc", "highly_variable"]
top_n_vars: [50, 100, 200, 500]

# PCA options
pca_overwrite: false

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.11.0 -latest \
  -profile docker \
  -main-script ./workflows/multiomics/full_pipeline/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name      |Description         |Attributes                                |
|:---------|:-------------------|:-----------------------------------------|
|`--id`    |ID of the sample.   |`string`, required, example: `"foo"`      |
|`--input` |Path to the sample. |`file`, required, example: `"input.h5mu"` |


### Outputs

|Name       |Description                     |Attributes                                 |
|:----------|:-------------------------------|:------------------------------------------|
|`--output` |Destination path to the output. |`file`, required, example: `"output.h5mu"` |


### Sample ID options

Options for adding the id to .obs on the MuData object. Having a sample 
id present in a requirement of several components for this pipeline.



|Name                                    |Description                                                                                         |Attributes                       |
|:---------------------------------------|:---------------------------------------------------------------------------------------------------|:--------------------------------|
|`--add_id_to_obs`                       |Add the value passed with --id to .obs.                                                             |`boolean`, default: `TRUE`       |
|`--add_id_obs_output`                   |.Obs column to add the sample IDs to. Required and only used when  --add_id_to_obs is set to 'true' |`string`, default: `"sample_id"` |
|`--add_id_make_observation_keys_unique` |Join the id to the .obs index (.obs_names).  Only used when --add_id_to_obs is set to 'true'.       |`boolean`, default: `TRUE`       |


### RNA filtering options

|Name                       |Description                                      |Attributes                    |
|:--------------------------|:------------------------------------------------|:-----------------------------|
|`--rna_min_counts`         |Minimum number of counts captured per cell.      |`integer`, example: `200`     |
|`--rna_max_counts`         |Maximum number of counts captured per cell.      |`integer`, example: `5000000` |
|`--rna_min_genes_per_cell` |Minimum of non-zero values per cell.             |`integer`, example: `200`     |
|`--rna_max_genes_per_cell` |Maximum of non-zero values per cell.             |`integer`, example: `1500000` |
|`--rna_min_cells_per_gene` |Minimum of non-zero values per gene.             |`integer`, example: `3`       |
|`--rna_min_fraction_mito`  |Minimum fraction of UMIs that are mitochondrial. |`double`, example: `0`        |
|`--rna_max_fraction_mito`  |Maximum fraction of UMIs that are mitochondrial. |`double`, example: `0.2`      |


### CITE-seq filtering options

|Name                           |Description                             |Attributes                      |
|:------------------------------|:---------------------------------------|:-------------------------------|
|`--prot_min_counts`            |Minimum number of counts per cell.      |`integer`, example: `3`         |
|`--prot_max_counts`            |Minimum number of counts per cell.      |`integer`, example: `5000000`   |
|`--prot_min_proteins_per_cell` |Minimum of non-zero values per cell.    |`integer`, example: `200`       |
|`--prot_max_proteins_per_cell` |Maximum of non-zero values per cell.    |`integer`, example: `100000000` |
|`--prot_min_cells_per_protein` |Minimum of non-zero values per protein. |`integer`, example: `3`         |


### Highly variable gene detection

|Name                              |Description                                                                                                                                                                                                    |Attributes                             |
|:---------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------|
|`--filter_with_hvg_var_output`    |In which .var slot to store a boolean array corresponding to the highly variable genes.                                                                                                                        |`string`, default: `"filter_with_hvg"` |
|`--filter_with_hvg_obs_batch_key` |If specified, highly-variable genes are selected within each batch separately and merged. This simple  process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. |`string`, default: `"sample_id"`       |


### Mitochondrial Gene Detection

|Name                             |Description                                                                                                                                                                                                                |Attributes                         |
|:--------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------------------|
|`--var_name_mitochondrial_genes` |In which .var slot to store a boolean array corresponding the mitochondrial genes.                                                                                                                                         |`string`                           |
|`--var_gene_names`               |.var column name to be used to detect mitochondrial genes instead of .var_names (default if not set). Gene names matching with the regex value from --mitochondrial_gene_regex will be identified as a mitochondrial gene. |`string`, example: `"gene_symbol"` |
|`--mitochondrial_gene_regex`     |Regex string that identifies mitochondrial genes from --var_gene_names. By default will detect human and mouse mitochondrial genes from a gene symbol.                                                                     |`string`, default: `"^[mM][tT]-"`  |


### QC metrics calculation options

|Name               |Description                                                                                                                                                                                                                                                                                                                                   |Attributes                                                               |
|:------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------|
|`--var_qc_metrics` |Keys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled 'True',  compared to the total sum of the values for all genes. Defaults to the combined values specified for --var_name_mitochondrial_genes and --filter_with_hvg_var_output. |List of `string`, example: `"ercc,highly_variable"`, multiple_sep: `","` |
|`--top_n_vars`     |Number of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. `--top_n_vars 20,50` finds cumulative proportion to the 20th and 50th most expressed vars.                                                                                                                               |List of `integer`, default: `50, 100, 200, 500`, multiple_sep: `","`     |


### PCA options

|Name              |Description                             |Attributes     |
|:-----------------|:---------------------------------------|:--------------|
|`--pca_overwrite` |Allow overwriting slots for PCA output. |`boolean_true` |

## Authors


  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (author, maintainer)

## Visualisation

```{mermaid}
%%| column: screen-inset-shaded
flowchart LR
    p0(Input)
    p2(toSortedList)
    p4(flatMap)
    p7(toSortedList)
    p9(Output)
    p11(filter)
    p17(add_id)
    p19(join)
    p24(mix)
    p22(filter)
    p27(filter)
    p32(split_modalities)
    p34(join)
    p41(concat)
    p37(filter)
    p39(test_wf:run_wf:split_modalities_workflow:splitStub)
    p42(flatMap)
    p44(filter)
    p47(toSortedList)
    p49(flatMap)
    p56(filter_with_counts)
    p58(join)
    p67(do_filter)
    p69(join)
    p78(filter_with_scrublet)
    p80(join)
    p116(concat)
    p84(filter)
    p87(toSortedList)
    p89(flatMap)
    p96(test_wf:run_wf:singlesample_processing_workflow:prot_singlesample:filter_with_counts:filter_with_counts_process1)
    p98(join)
    p107(test_wf:run_wf:singlesample_processing_workflow:prot_singlesample:do_filter:do_filter_process1)
    p109(join)
    p114(filter)
    p120(groupTuple)
    p126(concat)
    p128(join)
    p132(filter)
    p135(toSortedList)
    p137(flatMap)
    p139(toSortedList)
    p141(Output)
    p147(normalize_total)
    p149(join)
    p158(log1p)
    p160(join)
    p169(delete_layer)
    p171(join)
    p180(filter_with_hvg)
    p182(join)
    p191(rna_calculate_qc_metrics)
    p193(join)
    p234(concat)
    p198(filter)
    p201(toSortedList)
    p203(flatMap)
    p205(toSortedList)
    p207(Output)
    p213(clr)
    p215(join)
    p224(prot_calculate_qc_metrics)
    p226(join)
    p231(filter)
    p236(toSortedList)
    p242(merge)
    p244(join)
    p248(filter)
    p252(toSortedList)
    p254(flatMap)
    p261(pca)
    p263(join)
    p272(find_neighbors)
    p274(join)
    p283(umap)
    p285(join)
    p291(concat)
    p290(filter)
    p292(filter)
    p296(toSortedList)
    p298(flatMap)
    p305(pca)
    p307(join)
    p316(find_neighbors)
    p318(join)
    p327(test_wf:run_wf:integration_setup_workflow:initialize_integration_prot:umap:umap_process1)
    p329(join)
    p335(concat)
    p334(filter)
    p343(publish)
    p345(join)
    p350(toSortedList)
    p352(Output)
    p41-->p42
    p290-->p291
    p291-->p292
    p291-->p334
    p334-->p335
    p0-->p2
    p2-->p4
    p4-->p7
    p7-->p9
    p4-->p11
    p4-->p22
    p11-->p19
    p11-->p17
    p17-->p19
    p19-->p24
    p22-->p24
    p24-->p27
    p24-->p37
    p27-->p34
    p27-->p32
    p32-->p34
    p34-->p41
    p37-->p39
    p39-->p41
    p42-->p44
    p42-->p84
    p42-->p114
    p44-->p47
    p47-->p49
    p49-->p58
    p49-->p56
    p56-->p58
    p58-->p69
    p58-->p67
    p67-->p69
    p69-->p80
    p69-->p78
    p78-->p80
    p80-->p116
    p84-->p87
    p87-->p89
    p89-->p98
    p89-->p96
    p96-->p98
    p98-->p109
    p98-->p107
    p107-->p109
    p109-->p116
    p114-->p116
    p116-->p120
    p120-->p128
    p120-->p126
    p126-->p128
    p128-->p132
    p128-->p198
    p128-->p231
    p132-->p135
    p135-->p137
    p137-->p139
    p139-->p141
    p137-->p149
    p137-->p147
    p147-->p149
    p149-->p160
    p149-->p158
    p158-->p160
    p160-->p171
    p160-->p169
    p169-->p171
    p171-->p182
    p171-->p180
    p180-->p182
    p182-->p193
    p182-->p191
    p191-->p193
    p193-->p234
    p198-->p201
    p201-->p203
    p203-->p205
    p205-->p207
    p203-->p215
    p203-->p213
    p213-->p215
    p215-->p226
    p215-->p224
    p224-->p226
    p226-->p234
    p231-->p234
    p234-->p236
    p236-->p244
    p236-->p242
    p242-->p244
    p244-->p248
    p244-->p290
    p248-->p252
    p252-->p254
    p254-->p263
    p254-->p261
    p261-->p263
    p263-->p274
    p263-->p272
    p272-->p274
    p274-->p285
    p274-->p283
    p283-->p285
    p285-->p291
    p292-->p296
    p296-->p298
    p298-->p307
    p298-->p305
    p305-->p307
    p307-->p318
    p307-->p316
    p316-->p318
    p318-->p329
    p318-->p327
    p327-->p329
    p329-->p335
    p335-->p345
    p335-->p343
    p343-->p345
    p345-->p350
    p350-->p352

```
