---
title: "Full pipeline"
namespace: "Multiomics"
description: "A pipeline to analyse multiple multiomics samples."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `full_pipeline`  
Namespace: `multiomics`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/0.9.0/./workflows/multiomics/full_pipeline){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.9.0 -latest \
  -main-script ./workflows/multiomics/full_pipeline/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
id: # please fill in - example: "foo"
input: # please fill in - example: "input.h5mu"

# Sample ID options
add_id_to_obs: true
add_id_obs_output: "sample_id"
add_id_make_observation_keys_unique: true

# RNA filtering options
# rna_min_counts: 200
# rna_max_counts: 5000000
# rna_min_genes_per_cell: 200
# rna_max_genes_per_cell: 1500000
# rna_min_cells_per_gene: 3
# rna_min_fraction_mito: 0
# rna_max_fraction_mito: 0.2

# CITE-seq filtering options
# prot_min_counts: 3
# prot_max_counts: 5000000
# prot_min_proteins_per_cell: 200
# prot_max_proteins_per_cell: 100000000
# prot_min_cells_per_protein: 3
# prot_min_fraction_mito: 0
# prot_max_fraction_mito: 0.2

# Highly variable gene detection
filter_with_hvg_var_output: "filter_with_hvg"
filter_with_hvg_obs_batch_key: "sample_id"

# QC metrics calculation options
var_qc_metrics: ["filter_with_hvg"]
top_n_vars: [50, 100, 200, 500]

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.9.0 -latest \
  -profile docker \
  -main-script ./workflows/multiomics/full_pipeline/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name      |Description         |Attributes                                |
|:---------|:-------------------|:-----------------------------------------|
|`--id`    |ID of the sample.   |`string`, required, example: `"foo"`      |
|`--input` |Path to the sample. |`file`, required, example: `"input.h5mu"` |


### Sample ID options

Options for adding the id to .obs on the MuData object. Having a sample 
id present in a requirement of several components for this pipeline.



|Name                                    |Description                                                                                         |Attributes                       |
|:---------------------------------------|:---------------------------------------------------------------------------------------------------|:--------------------------------|
|`--add_id_to_obs`                       |Add the value passed with --id to .obs.                                                             |`boolean`, default: `TRUE`       |
|`--add_id_obs_output`                   |.Obs column to add the sample IDs to. Required and only used when  --add_id_to_obs is set to 'true' |`string`, default: `"sample_id"` |
|`--add_id_make_observation_keys_unique` |Join the id to the .obs index (.obs_names).  Only used when --add_id_to_obs is set to 'true'.       |`boolean`, default: `TRUE`       |


### RNA filtering options

|Name                       |Description                                      |Attributes                    |
|:--------------------------|:------------------------------------------------|:-----------------------------|
|`--rna_min_counts`         |Minimum number of counts captured per cell.      |`integer`, example: `200`     |
|`--rna_max_counts`         |Maximum number of counts captured per cell.      |`integer`, example: `5000000` |
|`--rna_min_genes_per_cell` |Minimum of non-zero values per cell.             |`integer`, example: `200`     |
|`--rna_max_genes_per_cell` |Maximum of non-zero values per cell.             |`integer`, example: `1500000` |
|`--rna_min_cells_per_gene` |Minimum of non-zero values per gene.             |`integer`, example: `3`       |
|`--rna_min_fraction_mito`  |Minimum fraction of UMIs that are mitochondrial. |`double`, example: `0`        |
|`--rna_max_fraction_mito`  |Maximum fraction of UMIs that are mitochondrial. |`double`, example: `0.2`      |


### CITE-seq filtering options

|Name                           |Description                                          |Attributes                      |
|:------------------------------|:----------------------------------------------------|:-------------------------------|
|`--prot_min_counts`            |Minimum number of counts per cell.                   |`integer`, example: `3`         |
|`--prot_max_counts`            |Minimum number of counts per cell.                   |`integer`, example: `5000000`   |
|`--prot_min_proteins_per_cell` |Minimum of non-zero values per cell.                 |`integer`, example: `200`       |
|`--prot_max_proteins_per_cell` |Maximum of non-zero values per cell.                 |`integer`, example: `100000000` |
|`--prot_min_cells_per_protein` |Minimum of non-zero values per protein.              |`integer`, example: `3`         |
|`--prot_min_fraction_mito`     |Minimum fraction of proteins that are mitochondrial. |`double`, example: `0`          |
|`--prot_max_fraction_mito`     |Maximum fraction of proteins that are mitochondrial. |`double`, example: `0.2`        |


### Highly variable gene detection

|Name                              |Description                                                                                                                                                                                                    |Attributes                             |
|:---------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------|
|`--filter_with_hvg_var_output`    |In which .var slot to store a boolean array corresponding to the highly variable genes.                                                                                                                        |`string`, default: `"filter_with_hvg"` |
|`--filter_with_hvg_obs_batch_key` |If specified, highly-variable genes are selected within each batch separately and merged. This simple  process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. |`string`, default: `"sample_id"`       |


### QC metrics calculation options

|Name               |Description                                                                                                                                                                                                                    |Attributes                                                                |
|:------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------|
|`--var_qc_metrics` |Keys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled 'True',  compared to the total sum of the values for all genes. |`string`, default: `"filter_with_hvg"`, example: `"ercc,highly_variable"` |
|`--top_n_vars`     |Number of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. `--top_n_vars 20,50` finds cumulative proportion to the 20th and 50th most expressed vars.                |`integer`, default: `50`, default: `100`, default: `200`, default: `500`  |

## Authors


  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (author, maintainer)

## Visualisation

```{mermaid}
%%| column: screen-inset-shaded
flowchart LR
    p0(Input)
    p2(toSortedList)
    p4(flatMap)
    p7(filter)
    p14(add_id)
    p19(mix)
    p18(filter)
    p20(Output)
    p21(filter)
    p27(split_modalities)
    p35(concat)
    p31(filter)
    p33(test_wf:run_wf:splitStub)
    p36(flatMap)
    p37(filter)
    p40(toSortedList)
    p42(flatMap)
    p50(filter_with_counts)
    p60(do_filter)
    p71(filter_with_scrublet)
    p77(toSortedList)
    p78(filter)
    p83(toSortedList)
    p85(flatMap)
    p89(filter)
    p91(flatMap)
    p97(test_wf:run_wf:rna_multisample:add_id:add_id_process1)
    p101(collect)
    p104(mix)
    p103(filter)
    p111(concat)
    p121(normalize_total)
    p131(log1p)
    p141(delete_layer)
    p151(filter_with_hvg)
    p161(calculate_qc_metrics)
    p258(concat)
    p166(filter)
    p169(toSortedList)
    p171(flatMap)
    p179(test_wf:run_wf:prot_singlesample:filter_with_counts:filter_with_counts_process1)
    p189(test_wf:run_wf:prot_singlesample:do_filter:do_filter_process1)
    p196(toSortedList)
    p197(filter)
    p202(toSortedList)
    p204(flatMap)
    p208(filter)
    p210(flatMap)
    p216(test_wf:run_wf:prot_multisample:add_id:add_id_process2)
    p220(collect)
    p223(mix)
    p222(filter)
    p230(test_wf:run_wf:prot_multisample:concat:concat_process1)
    p240(clr)
    p245(filter)
    p247(groupTuple)
    p254(test_wf:run_wf:concat:concat_process2)
    p259(toSortedList)
    p266(merge)
    p270(filter)
    p272(toSortedList)
    p274(flatMap)
    p282(pca)
    p292(find_neighbors)
    p302(umap)
    p308(concat)
    p307(filter)
    p309(filter)
    p311(toSortedList)
    p313(flatMap)
    p321(pca)
    p331(find_neighbors)
    p341(test_wf:run_wf:initialize_integration_prot:umap:umap_process1)
    p347(concat)
    p346(filter)
    p350(toSortedList)
    p352(Output)
    p18-->p19
    p19-->p20
    p35-->p36
    p36-->p37
    p77-->p78
    p103-->p104
    p36-->p166
    p196-->p197
    p222-->p223
    p36-->p245
    p258-->p259
    p307-->p308
    p308-->p309
    p308-->p346
    p346-->p347
    p0-->p2
    p2-->p4
    p4-->p7
    p4-->p18
    p7-->p14
    p14-->p19
    p14-->p21
    p14-->p31
    p21-->p27
    p27-->p35
    p31-->p33
    p33-->p35
    p37-->p40
    p40-->p42
    p42-->p50
    p50-->p60
    p60-->p71
    p71-->p77
    p78-->p83
    p83-->p85
    p85-->p89
    p85-->p103
    p89-->p91
    p91-->p97
    p97-->p101
    p101-->p104
    p104-->p111
    p111-->p121
    p121-->p131
    p131-->p141
    p141-->p151
    p151-->p161
    p161-->p258
    p166-->p169
    p169-->p171
    p171-->p179
    p179-->p189
    p189-->p196
    p197-->p202
    p202-->p204
    p204-->p208
    p204-->p222
    p208-->p210
    p210-->p216
    p216-->p220
    p220-->p223
    p223-->p230
    p230-->p240
    p240-->p258
    p245-->p247
    p247-->p254
    p254-->p258
    p259-->p266
    p266-->p270
    p266-->p307
    p270-->p272
    p272-->p274
    p274-->p282
    p282-->p292
    p292-->p302
    p302-->p308
    p309-->p311
    p311-->p313
    p313-->p321
    p321-->p331
    p331-->p341
    p341-->p347
    p347-->p350
    p350-->p352

```
