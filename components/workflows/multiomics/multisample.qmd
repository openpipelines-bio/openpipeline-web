---
title: "Multisample"
namespace: "Multiomics"
description: "This workflow serves as an entrypoint into the 'full_pipeline' in order to re-run the multisample processing and the integration setup."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `multisample`  
Namespace: `multiomics`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/0.11.2/./workflows/multiomics/multisample){.btn-action .btn-sm .btn-info .btn role="button"}

:::

An input .h5mu file will 
first be split in order to run the multisample processing per modality. Next, the modalities
are merged again and the integration setup pipeline is executed. Please note that this workflow
assumes that samples from multiple pipelines are already concatenated. 


## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.11.2 -latest \
  -main-script ./workflows/multiomics/multisample/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
id: # please fill in - example: "foo"
input: # please fill in - example: "input.h5mu"

# Outputs
# output: "$id.$key.output.h5mu"

# Highly variable gene detection
filter_with_hvg_var_output: "filter_with_hvg"
filter_with_hvg_obs_batch_key: "sample_id"

# QC metrics calculation options
var_qc_metrics: ["filter_with_hvg"]
top_n_vars: [50, 100, 200, 500]

# PCA options
pca_overwrite: false

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.11.2 -latest \
  -profile docker \
  -main-script ./workflows/multiomics/multisample/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name      |Description         |Attributes                                |
|:---------|:-------------------|:-----------------------------------------|
|`--id`    |ID of the sample.   |`string`, required, example: `"foo"`      |
|`--input` |Path to the sample. |`file`, required, example: `"input.h5mu"` |


### Outputs

|Name       |Description                     |Attributes                                 |
|:----------|:-------------------------------|:------------------------------------------|
|`--output` |Destination path to the output. |`file`, required, example: `"output.h5mu"` |


### Highly variable gene detection

|Name                              |Description                                                                                                                                                                                                    |Attributes                             |
|:---------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------|
|`--filter_with_hvg_var_output`    |In which .var slot to store a boolean array corresponding to the highly variable genes.                                                                                                                        |`string`, default: `"filter_with_hvg"` |
|`--filter_with_hvg_obs_batch_key` |If specified, highly-variable genes are selected within each batch separately and merged. This simple  process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. |`string`, default: `"sample_id"`       |


### QC metrics calculation options

|Name               |Description                                                                                                                                                                                                                    |Attributes                                                                                             |
|:------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------|
|`--var_qc_metrics` |Keys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled 'True',  compared to the total sum of the values for all genes. |List of `string`, default: `"filter_with_hvg"`, example: `"ercc,highly_variable"`, multiple_sep: `","` |
|`--top_n_vars`     |Number of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. `--top_n_vars 20,50` finds cumulative proportion to the 20th and 50th most expressed vars.                |List of `integer`, default: `50, 100, 200, 500`, multiple_sep: `","`                                   |


### PCA options

|Name              |Description                             |Attributes     |
|:-----------------|:---------------------------------------|:--------------|
|`--pca_overwrite` |Allow overwriting slots for PCA output. |`boolean_true` |

## Authors


  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (author, maintainer)

## Visualisation

```{mermaid}
%%| column: screen-inset-shaded
flowchart LR
    v0(Input)
    v2(toSortedList)
    v4(flatMap)
    v7(filter)
    v12(split_modalities)
    v14(join)
    v21(concat)
    v17(filter)
    v19(test_wf:run_wf:split_modalities_workflow:splitStub)
    v22(flatMap)
    v24(filter)
    v27(toSortedList)
    v29(flatMap)
    v31(toSortedList)
    v33(Output)
    v39(normalize_total)
    v41(join)
    v50(log1p)
    v52(join)
    v61(delete_layer)
    v63(join)
    v72(filter_with_hvg)
    v74(join)
    v83(rna_calculate_qc_metrics)
    v85(join)
    v126(concat)
    v90(filter)
    v93(toSortedList)
    v95(flatMap)
    v97(toSortedList)
    v99(Output)
    v105(clr)
    v107(join)
    v116(prot_calculate_qc_metrics)
    v118(join)
    v123(filter)
    v127(groupTuple)
    v133(merge)
    v135(join)
    v139(filter)
    v143(toSortedList)
    v145(flatMap)
    v152(pca)
    v154(join)
    v163(find_neighbors)
    v165(join)
    v174(umap)
    v176(join)
    v182(concat)
    v181(filter)
    v183(filter)
    v187(toSortedList)
    v189(flatMap)
    v196(pca)
    v198(join)
    v207(find_neighbors)
    v209(join)
    v218(test_wf:run_wf:integration_setup_workflow:initialize_integration_prot:umap:umap_process1)
    v220(join)
    v226(concat)
    v225(filter)
    v234(publish)
    v236(join)
    v241(toSortedList)
    v243(Output)
    v21-->v22
    v126-->v127
    v181-->v182
    v182-->v183
    v182-->v225
    v225-->v226
    v0-->v2
    v2-->v4
    v4-->v7
    v4-->v17
    v7-->v14
    v7-->v12
    v12-->v14
    v14-->v21
    v17-->v19
    v19-->v21
    v22-->v24
    v22-->v90
    v22-->v123
    v24-->v27
    v27-->v29
    v29-->v31
    v31-->v33
    v29-->v41
    v29-->v39
    v39-->v41
    v41-->v52
    v41-->v50
    v50-->v52
    v52-->v63
    v52-->v61
    v61-->v63
    v63-->v74
    v63-->v72
    v72-->v74
    v74-->v85
    v74-->v83
    v83-->v85
    v85-->v126
    v90-->v93
    v93-->v95
    v95-->v97
    v97-->v99
    v95-->v107
    v95-->v105
    v105-->v107
    v107-->v118
    v107-->v116
    v116-->v118
    v118-->v126
    v123-->v126
    v127-->v135
    v127-->v133
    v133-->v135
    v135-->v139
    v135-->v181
    v139-->v143
    v143-->v145
    v145-->v154
    v145-->v152
    v152-->v154
    v154-->v165
    v154-->v163
    v163-->v165
    v165-->v176
    v165-->v174
    v174-->v176
    v176-->v182
    v183-->v187
    v187-->v189
    v189-->v198
    v189-->v196
    v196-->v198
    v198-->v209
    v198-->v207
    v207-->v209
    v209-->v220
    v209-->v218
    v218-->v220
    v220-->v226
    v226-->v236
    v226-->v234
    v234-->v236
    v236-->v241
    v241-->v243

```
