---
title: "Multisample"
namespace: "Multiomics"
description: "This workflow serves as an entrypoint into the 'full_pipeline' in order to re-run the multisample processing and the integration setup."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `multisample`  
Namespace: `multiomics`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/0.11.3/./workflows/multiomics/multisample){.btn-action .btn-sm .btn-info .btn role="button"}

:::

An input .h5mu file will 
first be split in order to run the multisample processing per modality. Next, the modalities
are merged again and the integration setup pipeline is executed. Please note that this workflow
assumes that samples from multiple pipelines are already concatenated. 


## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.11.3 -latest \
  -main-script ./workflows/multiomics/multisample/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
id: # please fill in - example: "foo"
input: # please fill in - example: "input.h5mu"

# Outputs
# output: "$id.$key.output.h5mu"

# Highly variable gene detection
filter_with_hvg_var_output: "filter_with_hvg"
filter_with_hvg_obs_batch_key: "sample_id"

# QC metrics calculation options
var_qc_metrics: ["filter_with_hvg"]
top_n_vars: [50, 100, 200, 500]

# PCA options
pca_overwrite: false

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.11.3 -latest \
  -profile docker \
  -main-script ./workflows/multiomics/multisample/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name      |Description         |Attributes                                |
|:---------|:-------------------|:-----------------------------------------|
|`--id`    |ID of the sample.   |`string`, required, example: `"foo"`      |
|`--input` |Path to the sample. |`file`, required, example: `"input.h5mu"` |


### Outputs

|Name       |Description                     |Attributes                                 |
|:----------|:-------------------------------|:------------------------------------------|
|`--output` |Destination path to the output. |`file`, required, example: `"output.h5mu"` |


### Highly variable gene detection

|Name                              |Description                                                                                                                                                                                                    |Attributes                             |
|:---------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------|
|`--filter_with_hvg_var_output`    |In which .var slot to store a boolean array corresponding to the highly variable genes.                                                                                                                        |`string`, default: `"filter_with_hvg"` |
|`--filter_with_hvg_obs_batch_key` |If specified, highly-variable genes are selected within each batch separately and merged. This simple  process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. |`string`, default: `"sample_id"`       |


### QC metrics calculation options

|Name               |Description                                                                                                                                                                                                                    |Attributes                                                                                             |
|:------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------|
|`--var_qc_metrics` |Keys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled 'True',  compared to the total sum of the values for all genes. |List of `string`, default: `"filter_with_hvg"`, example: `"ercc,highly_variable"`, multiple_sep: `","` |
|`--top_n_vars`     |Number of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. `--top_n_vars 20,50` finds cumulative proportion to the 20th and 50th most expressed vars.                |List of `integer`, default: `50, 100, 200, 500`, multiple_sep: `","`                                   |


### PCA options

|Name              |Description                             |Attributes     |
|:-----------------|:---------------------------------------|:--------------|
|`--pca_overwrite` |Allow overwriting slots for PCA output. |`boolean_true` |

## Authors


  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (author, maintainer)

## Visualisation

```{mermaid}
%%| column: screen-inset-shaded
flowchart LR
    v0(Input)
    v2(toSortedList)
    v4(flatMap)
    v7(filter)
    v12(split_modalities)
    v14(join)
    v21(concat)
    v17(filter)
    v19(test_wf:run_wf:split_modalities_workflow:splitStub)
    v22(flatMap)
    v23(filter)
    v26(toSortedList)
    v28(flatMap)
    v30(toSortedList)
    v32(Output)
    v38(normalize_total)
    v40(join)
    v48(log1p)
    v50(join)
    v58(delete_layer)
    v60(join)
    v68(filter_with_hvg)
    v70(join)
    v78(rna_calculate_qc_metrics)
    v80(join)
    v121(concat)
    v86(filter)
    v89(toSortedList)
    v91(flatMap)
    v93(toSortedList)
    v95(Output)
    v101(clr)
    v103(join)
    v111(prot_calculate_qc_metrics)
    v113(join)
    v119(filter)
    v122(groupTuple)
    v128(merge)
    v130(join)
    v133(filter)
    v137(toSortedList)
    v139(flatMap)
    v146(pca)
    v148(join)
    v156(find_neighbors)
    v158(join)
    v166(umap)
    v168(join)
    v173(concat)
    v172(filter)
    v174(filter)
    v178(toSortedList)
    v180(flatMap)
    v187(pca)
    v189(join)
    v197(find_neighbors)
    v199(join)
    v207(test_wf:run_wf:integration_setup_workflow:initialize_integration_prot:umap:umap_process1)
    v209(join)
    v214(concat)
    v213(filter)
    v220(publish)
    v222(join)
    v227(toSortedList)
    v229(Output)
    v21-->v22
    v22-->v23
    v22-->v86
    v22-->v119
    v121-->v122
    v172-->v173
    v173-->v174
    v173-->v213
    v213-->v214
    v0-->v2
    v2-->v4
    v4-->v7
    v4-->v17
    v7-->v14
    v7-->v12
    v12-->v14
    v14-->v21
    v17-->v19
    v19-->v21
    v23-->v26
    v26-->v28
    v28-->v30
    v30-->v32
    v28-->v40
    v28-->v38
    v38-->v40
    v40-->v50
    v40-->v48
    v48-->v50
    v50-->v60
    v50-->v58
    v58-->v60
    v60-->v70
    v60-->v68
    v68-->v70
    v70-->v80
    v70-->v78
    v78-->v80
    v80-->v121
    v86-->v89
    v89-->v91
    v91-->v93
    v93-->v95
    v91-->v103
    v91-->v101
    v101-->v103
    v103-->v113
    v103-->v111
    v111-->v113
    v113-->v121
    v119-->v121
    v122-->v130
    v122-->v128
    v128-->v130
    v130-->v133
    v130-->v172
    v133-->v137
    v137-->v139
    v139-->v148
    v139-->v146
    v146-->v148
    v148-->v158
    v148-->v156
    v156-->v158
    v158-->v168
    v158-->v166
    v166-->v168
    v168-->v173
    v174-->v178
    v178-->v180
    v180-->v189
    v180-->v187
    v187-->v189
    v189-->v199
    v189-->v197
    v197-->v199
    v199-->v209
    v199-->v207
    v207-->v209
    v209-->v214
    v214-->v222
    v214-->v220
    v220-->v222
    v222-->v227
    v227-->v229

```
