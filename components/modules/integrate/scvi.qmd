---
title: "Scvi"
namespace: "Integrate"
description: "Performs scvi integration as done in the human lung cell atlas https://github.com/LungCellAtlas/HLCA"
type: "module"
toc: false
---

::: {.column-margin}

### Info

ID: `scvi`  
Namespace: `integrate`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/0.9.0/./src/integrate/scvi){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.9.0 -latest \
  -main-script target/nextflow/integrate/scvi/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
input: # please fill in - example: "path/to/file"
modality: "rna"
# input_layer: "foo"
obs_batch: "sample_id"
# var_input: "foo"

# Outputs
# output: "$id.$key.output.output"
# model_output: "$id.$key.model_output.model_output"
# output_compression: "gzip"
obsm_output: "X_scvi_integrated"

# Early stopping arguments
# early_stopping: true
early_stopping_monitor: "elbo_validation"
early_stopping_patience: 45
early_stopping_min_delta: 0.0

# Learning parameters
# max_epochs: 123
reduce_lr_on_plateau: true
lr_factor: 0.6
lr_patience: 30

# Data validition
n_obs_min_count: 0
n_var_min_count: 0

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 0.9.0 -latest \
  -profile docker \
  -main-script target/nextflow/integrate/scvi/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name            |Description                                                                    |Attributes                       |
|:---------------|:------------------------------------------------------------------------------|:--------------------------------|
|`--input`       |Input h5mu file                                                                |`file`, required                 |
|`--modality`    |                                                                               |`string`, default: `"rna"`       |
|`--input_layer` |Input layer to use. If None, X is used                                         |`string`                         |
|`--obs_batch`   |Column name discriminating between your batches.                               |`string`, default: `"sample_id"` |
|`--var_input`   |.var column containing highly variable genes. By default, do not subset genes. |`string`                         |


### Outputs

|Name                   |Description                                                      |Attributes                               |
|:----------------------|:----------------------------------------------------------------|:----------------------------------------|
|`--output`             |Output h5mu file.                                                |`file`, required                         |
|`--model_output`       |Folder where the state of the trained model will be saved to.    |`file`                                   |
|`--output_compression` |The compression format to be used on the output h5mu object.     |`string`, example: `"gzip"`              |
|`--obsm_output`        |In which .obsm slot to store the resulting integrated embedding. |`string`, default: `"X_scvi_integrated"` |


### Early stopping arguments

|Name                         |Description                                                                                                                                          |Attributes                             |
|:----------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------|
|`--early_stopping`           |Whether to perform early stopping with respect to the validation set.                                                                                |`boolean`                              |
|`--early_stopping_monitor`   |Metric logged during validation set epoch.                                                                                                           |`string`, default: `"elbo_validation"` |
|`--early_stopping_patience`  |Number of validation epochs with no improvement after which training will be stopped.                                                                |`integer`, default: `45`               |
|`--early_stopping_min_delta` |Minimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement. |`double`, default: `0`                 |


### Learning parameters

|Name                     |Description                                                                                                      |Attributes                 |
|:------------------------|:----------------------------------------------------------------------------------------------------------------|:--------------------------|
|`--max_epochs`           |Number of passes through the dataset, defaults to (20000 / number of cells) * 400 or 400; whichever is smallest. |`integer`                  |
|`--reduce_lr_on_plateau` |Whether to monitor validation loss and reduce learning rate when validation set `lr_scheduler_metric` plateaus.  |`boolean`, default: `TRUE` |
|`--lr_factor`            |Factor to reduce learning rate.                                                                                  |`double`, default: `0.6`   |
|`--lr_patience`          |Number of epochs with no improvement after which learning rate will be reduced.                                  |`double`, default: `30`    |


### Data validition

|Name                |Description                                                                                                                      |Attributes              |
|:-------------------|:--------------------------------------------------------------------------------------------------------------------------------|:-----------------------|
|`--n_obs_min_count` |Minimum number of cells threshold ensuring that every obs_batch category has sufficient observations (cells) for model training. |`integer`, default: `0` |
|`--n_var_min_count` |Minimum number of genes threshold ensuring that every var_input filter has sufficient observations (genes) for model training.   |`integer`, default: `0` |

## Authors


  * Malte D. Luecken [{{< fa brands github >}}](https://github.com/LuckyMD) [{{< fa brands orcid >}}](https://orcid.org/0000-0001-7464-7921) [{{< fa brands linkedin >}}](https://linkedin.com/in/malte-l%C3%BCcken-b8b21049) (author)

  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (maintainer)

  * Matthias Beyens [{{< fa brands github >}}](https://github.com/MatthiasBeyens) [{{< fa brands orcid >}}](https://orcid.org/0000-0003-3304-0706) [{{< fa brands linkedin >}}](https://linkedin.com/in/mbeyens) (contributor)
